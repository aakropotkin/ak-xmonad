# Produces a string, which is to be the body of XMonadTheme.hs
{
  # Setting `asModule=false` allows output to be embedded in existsing `hs` file
  asModule ? true,
  # If colors is not provided, it will be read manually.
  colors ? null,
  lib ? import <nixpkgs/lib>
}:
let
  cls = if isNull colors
    then with lib; with lib.strings; let
      themesPath = /home/camus/.config/nixpkgs/themes;
      themeFile  = themesPath + "/home.nix";
      rmSpaces   = _s: concatStrings (lists.remove " " (stringToCharacters _s));
      themeLines = map rmSpaces (splitString "\n" (fileContents themeFile));
      targLine   = lists.findFirst (s: hasPrefix "theme=\"" s) null themeLines;
      theme      = assert !(isNull targLine);
                   removeSuffix "\";" (removePrefix "theme=\"" targLine);
      pth        = themesPath + "/colors/${theme}.nix";
    in (import pth).colors
    else colors;
in ''
  ${lib.optionalString asModule "module XMonadTheme where"}

  data Color = Color
    { cName
    , cNormal
    , cBold   :: String
    } deriving (Show, Eq)

  data Theme = Theme
      { tBorder
      , tBorderFocused
      , tForeground
      , tForegroundHi
      , tBackground
      , tBackgroundHi
      , tFont          :: String
      , tFontSize      :: Int
      , tColors        :: [Color]
      } deriving (Show, Eq)

  myColors =
    [ Color "black"   "${cls.black0}"   "${cls.black8}"
    , Color "red"     "${cls.red1}"     "${cls.red9}"
    , Color "green"   "${cls.green2}"   "${cls.green10}"
    , Color "yellow"  "${cls.yellow3}"  "${cls.yellow11}"
    , Color "blue"    "${cls.blue4}"    "${cls.blue12}"
    , Color "magenta" "${cls.magenta5}" "${cls.magenta13}"
    , Color "cyan"    "${cls.cyan6}"    "${cls.cyan14}"
    , Color "white"   "${cls.white7}"   "${cls.white15}"
    ]

  cHash :: String -> Maybe (String, String)
  cHash s = lookup s hmc
    where hmc = map (\(Color n a b) -> (n,(a,b))) myColors
  cHash' :: String -> (String, String)
  cHash' s = case cHash s of
    Just r  -> r
    Nothing -> error $ "Unable to find color \"" ++ s ++ "\""

  myTheme = Theme
      { tBorder        = "${cls.border}"
      , tBorderFocused = "${cls.borderHi}"
      , tForeground    = "${cls.foreground}"
      , tForegroundHi  = "${cls.foregroundHi}"
      , tBackground    = "${cls.background}"
      , tBackgroundHi  = "${cls.backgroundHi}"
      , tFont          = "Hack"
      , tFontSize      = 16
      , tColors        = myColors
      }

''

# Different Types of themes:
# 1. XMonad.Config (basic stuff)
# 2. XMonad.Layout.Decoration
#    * Honestly I just want the tabs, I don't want decorations...
#    * Used for a collection of fancy layouts with tabs and other features
#      in `xmonad-contrib`
#    * Has most a large range of settings, a good one to build off of.
# 3. XMonad.Prompt.XPConfig
#    * For the `dmenu` style pop up prompts.
#    * You have already written this transformer.
# 4. XMonad.Hooks.DynamicLog.PP
#    * For `xmobar` and other dynamic loggers.
#    * You have already written this transformer.


#-- Prompt Config
#mkXPConfig :: Theme -> XPConfig
#mkXPConfig theme = def
#    { font                 = "xft:" ++ tFont theme ++ 
#                                ":size=" ++ show (tFontSize theme)
#    , bgColor              = tBackground theme
#    , fgColor              = tForeground theme
#    , fgHLight             = tForegroundHi theme
#    , bgHLight             = tBackgroundHi theme
#    , borderColor          = tBorder theme
#    , promptBorderWidth    = barsBorder
#    , height               = barsHeight
#    , showCompletionOnTab  = True
#    }
#-- }}}


#-- Xmobar Pretty Printing
#myPP :: PP
#myPP = xmobarPP {
#    ppCurrent         = xmobarColor (fst $ cHash' "red") "" . wrap "[" "]"
#  , ppVisible         = wrap "[" "]"
#  , ppTitle           = xmobarColor (fst $ cHash' "green") "" . shorten 50
#  , ppSort            = getSortByXineramaPhysicalRule def
#  , ppHidden          = noScratch
#  } where noScratch w = if w == "NSP" then "" else w


#-- Hiatus Theme (generated by `xmonadTheme.nix`
#myTheme = Theme
#    { tBorder        = "#181512"
#    , tBorderFocused = "#E93C93"
#    , tForeground    = "#FBF0D2"
#    , tForegroundHi  = "#839496"
#    , tBackground    = "#181512"
#    , tBackgroundHi  = "#86458B"
#    , tFont          = "Hack"
#    , tFontSize      = 16
#    , tColors        = myColors -- Extra colors (red, yellow, ...)
#    }


#-- Theme template from XMonad.Layout.Decoration
#Theme { activeColor         = 
#      , inactiveColor       =
#      , urgentColor         =
#      , activeBorderColor   = "#E93C93" -- hask.tBorderFocused
#      , inactiveBorderColor = "#181512" -- hask.tBorder
#      , urgentBorderColor   = --nix.cur
#      , activeTextColor     = "#839496" -- hask.tForegroundHi
#      , inactiveTextColor   = "#FBF0D2" -- hask.tForeground
#      , urgentTextColor     = --nix.focusHi
#      , fontName            = "-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*"
#      , decoWidth           = 200
#      , decoHeight          = 20
#      , windowTitleAddons   = []
#      , windowTitleIcons    = []
#      }
